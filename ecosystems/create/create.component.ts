// src/app/ecosystems/create/create.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { EcosystemService } from '../ecosystems.service'; // Import your Ecosystem service
import { Ecosystem } from '../ecosystems'; // Import your Ecosystem interface
import { GreenhouseService } from '../../greenhouses/greenhouses.service'; // Assuming you also need greenhouses for ecosystems
import { Greenhouse } from '../../greenhouses/greenhouse'; // Import your Greenhouse interface
import { Router } from '@angular/router'; // Import the router

@Component({
  selector: 'app-create-ecosystem',
  templateUrl: './create.component.html',
  styleUrls: ['./create.component.css']
})
export class EcosystemCreateComponent implements OnInit {
  ecosystemForm!: FormGroup;
  isLoading = false;
  errorMessage = '';
  greenhouses!: Greenhouse[]; // Declares 'greenhouses' as an array of Greenhouse interfaces

  constructor(
    private fb: FormBuilder,
    private ecosystemService: EcosystemService, // Inject the EcosystemService here
    private greenhouseService: GreenhouseService, // Inject the GreenhouseService here
    private router: Router // Inject the router here
  ) { }

  ngOnInit() {
    this.ecosystemForm = this.fb.group({
      _id: [null], // Assuming _id is optional as it's generated by the database
      type: ['', Validators.required],
      description: ['', Validators.required],
      greenhouseId: ['', Validators.required] // Assuming this is a dropdown in your form
    });

    // Fetch greenhouses for the dropdown
    this.greenhouseService.getGreenhouses().subscribe({
      next: (data) => this.greenhouses = data,
      error: (error) => console.error('Error fetching greenhouses', error),
      complete: () => console.log('Greenhouse fetch complete') // Optional
    });
  }

  onSubmit() {
    if (this.ecosystemForm.valid) {
      this.ecosystemService.addEcosystem(this.ecosystemForm.value).subscribe({
        next: (newEcosystem) => {
          console.log('New ecosystem added:', newEcosystem);
          this.router.navigate(['/ecosystems', newEcosystem._id.toString()]);
          // Redirect or show success message
        },
        error: (error) => {
          console.error('There was an error adding the ecosystem', error);
          // Show error message
        }
      });
    } else {
      // Trigger validation messages
      for (const control of Object.values(this.ecosystemForm.controls)) {
        control.markAsTouched();
      }
    }
  }
}
